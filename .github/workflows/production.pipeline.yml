name: Main | Production CI/CD

on:
  push:
    branches:
      - '*'
      - 'feature/*'
      - 'bug/*'
  pull_request:

env:
  DB_HOST: ${{ vars.DB_HOST }}
  DB_PORT: ${{ vars.DB_PORT }}
  DB_NAME: ${{ vars.DB_NAME }}
  DB_USERNAME: ${{ vars.DB_USERNAME }}
  DB_PASSWORD: ${{ vars.DB_PASSWORD }}
  MQTT_CLIENT_ID: ${{ secrets.MQTT_CLIENT_ID }}
  MQTT_CLIENT_ENDPOINT: ${{ secrets.MQTT_CLIENT_ENDPOINT }}
  MQTT_AWS_REGION: ${{ secrets.MQTT_AWS_REGION }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  SPRING_PROFILES_ACTIVE: "production"
  SECURITY_KEY: ${{ secrets.SECURITY_KEY }}

jobs:
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ['java']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '17'
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
      - run: mvn clean install -DskipTests
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  snyk-security-scan:
    name: Snyk Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/maven@master
        continue-on-error: true # To make sure that SARIF upload gets called
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk.sarif

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PORT: ${{ vars.DB_PORT }}
          POSTGRES_HOST: ${{ vars.DB_HOST }}
          POSTGRES_USER: ${{ vars.DB_USERNAME }}
          POSTGRES_PASSWORD: ${{ vars.DB_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DB_NAME }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3.3.0
        with:
          distribution: 'zulu'
          java-version: '17'
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Run Tests
        run: mvn -B test -Dsonar.projectKey=tdedevelopment_MESCloud

  build-and-analyze:
    name: Build and Analyze
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    needs: unit-tests

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PORT: ${{ secrets.DB_PORT }}
          POSTGRES_HOST: ${{ secrets.DB_HOST }}
          POSTGRES_USER: ${{ secrets.DB_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DB_NAME }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v3.3.0
        with:
          distribution: 'zulu'
          java-version: '17'
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and Analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn clean install -B verify --file pom.xml org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
          -Dsonar.projectKey=tdedevelopment_MESCloud
      - name: Upload JAR
        uses: actions/upload-artifact@v3.1.2
        with:
          name: artifact
          path: target/mescloud-0.0.1-SNAPSHOT.jar

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: build-and-analyze
    steps:
      - name: Download JAR
        uses: actions/download-artifact@v2
        with:
          name: artifact
      - name: Deploy to AWS Beanstalk
        uses: einaregilsson/beanstalk-deploy@v13
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_session_token: ${{ secrets.AWS_SESSION_TOKEN }}
          use_existing_version_if_available: true
          application_name: mescloud
          environment_name: Mescloud-env
          version_label: ${{github.SHA}}
          region: eu-west-3
          deployment_package: mescloud-0.0.1-SNAPSHOT.jar
